# Note: From "Source/ProjectM"
# I still don't generally recommend translating mixed files like these, as it can
# sometimes lead to inaccurate translations (as a result of the program losing
# track of BA and PO, since it can't parse some GCTRM directives (setting BA or
# PO directly, through .BA/.PO <- LABEL, for isntance, always causes a desync),
# But here's an example of what such a mixed translation might look like.

CPU DI fix [Bero]
* 04917300 48000040
* 04B8A40C 00000500

CPUs Don't Ignore Other CPUs to Target Humans [Magus]
* 04907D60 4800001C

#################################
nana throws without considering human input [Bero, v1.2 by Eon, dual-hook fix by fudgepop01]
#################################
HOOK @ $80903440
{
  # update::aiInput (specifically right before calling aiInput::child_update)
  
  # last line before nana child_update call
    lwz r3, 0x0034 (r31)
    
    # r3 = childAi (AiInput)
    # r4 = nana stick ptr
    # r5 = nana buttons
    # r6 = aiChrIdxPtr
    # r7 = is tap jump enabled

check_if_grabbing:
    mr r14, r3 # AiInput
    lwz r15, 0x44(r14) # AiInput->AiAct r15 = AiAct
    lwz r16, 0x74(r15) # AiAct->AiStat r16 = AiStat
    # AI action
    # checks if between 0x34 and 0x3B which covers all "grabbing/holding" states
    lwz r17, 0xB4(r16)
    # 0x34 = "Catch" (action)
    cmpwi r17, 0x34
    blt+ notThrow
    # 0x3B = "CatchCut" (action)
    cmpwi r17, 0x3B
    bgt+ notThrow
    b setupGrab

setupGrab:
    # grab or setup
    li r17, 0x0
    stw r17, 0x0(r4) # stickX
    stw r17, 0x4(r4) # stickY
    mr r5, r17 # buttons
    # li r17, 0x79 # forces nana into mode that allows ai scripts
    li r17, 0x7e # forces nana into mode that allows ai scripts
    stw r17, 0x48(r14)
    li r17, 0xA
    stb r17, 0x1ba(r16)
    
    lhz r17, 0x78(r15) # r4 = aiScript
    cmpwi r17, 0x6100 # if aiScript = 6100
    beq- inThrowRoutine
    b changeToThrowRoutine

inThrowRoutine:
    # relies on AI script to tell it when the throw is done for some reason?
    # this will only branch if AI var23 is set to 0 :thonk:
    lwz r17, 0x5C(r15)
    cmpwi r17, 0x0
    bne- notThrow

    lwz r17, 0x8(r5)                 # \
    andi. r18, r17, 0x100            # |
    cmpwi r18, 0x100                 # | if cstick is pressed, tell nana to forget about it
    beq changeToThrowRoutine         # |
    stw r18, 0x8(r5)                 # /

    b notThrow

changeToThrowRoutine:

    #act_change to 0x6100
    #args: (AiAct*, unsigned int nextScript, char* nextTargetAIChrIdx, int vanilla ai routine, int unk2)
    
    mr r3, r15 # r3 = AiAct
    li r5, 0x1
    stw r5, 0x5C(r3)      # sets internal AI variable (var23) to 1 for some reason 
    lhz r4, 0x78(r3)

    li r4, 0x6100         # next script
    
    li r0, -0x1             #\ initialise this variable that PMDT never did
    stb r0, 0x24(r1)        #| (stb + addi make it a pointer to 0xFF, -
    addi r5, r1, 0x24       #/ - effectively randomizes the AI target)
    li r6, 0x6100 # unk1 arg
    li r7, 0 # unk2 arg

    # calls act_change(this, 0x6100, &0xFF, 0, 0)
    lis r12, 0x8091
    ori r12, r12, 0x8554
    mtctr r12
    bctr
    # the bctr means it just branches and will not return here at the next blr.
    # Thus: exit

notThrow:
  b %end%
}

HOOK @ $8090366c
{
  # FNTE = Force Nana Throw Execution
  # child_update::aiInput (specifically right before the nana distance check)

FNTE_begin:
    lwz r14, 0x44(r23) # AiInput->AiAct r14 = AiAct
    lwz r15, 0x74(r14) # AiAct->AiStat r15 = AiStat
    
    # AI action (see previous HOOK for explaination)
    lwz r16, 0xB4(r15)
    # 0x34 = "Catch" (action)
    cmpwi r16, 0x34
    blt+ FNTE_normalExec
    # 0x3B = "CatchCut" (action)
    cmpwi r16, 0x3B
    bgt+ FNTE_normalExec
    bl FNTE_cache_large_dist
    b FNTE_normalExec

FNTE_big_long_dist:
    float 9999

FNTE_cache_large_dist:
    mflr r12 # lr is set by the bl here...
    lfs f31, 0x4(r12) # ...which lets us grab the "FNTE_big_long_dist" float based on an offset
    blr

FNTE_normalExec:
    fcmpo 0, f31, f29
}

HOOK @ $809188B0
{
  # forces nana to ignore calls to script 0x1120 while grabbing 
  # r26 = next script
  # r25 = AiActPtr
nana_check:
  lwz r14, 0x74(r25) # r14 = AiStat
  lbz r15, 0xAF(r14) # r15 = character ID
  cmpwi r15, 0x10
  bne end

action_check:
  lwz r15, 0xB4(r14) # r15 = action ID
  cmpwi r15, 0x39 # r39 = grab idle
  bne end

check_if_6100:
  lhz r15, 0x78(r25)
  cmpwi r15, 0x6100
  beq ignore_if_6100

end:
  sth r26, 120(r25)

ignore_if_6100:
}
op nop @ $809036cc

Custom AI Function Loader [Magus]
* C291E108 0000002A
* 2800002E 40A10144
* 57E7C7FE 3D808058
* 618C047C 38BFEFD2
* 2C070001 40A20008
* 38A5FF00 54A5103A
* 80CC0000 7C053000
* 41810110 7D8C282E
* 2C0C0000 41820104
* 3CA08076 60A54E9C
* 7C2B0B78 48000008
* 816B0000 814B0004
* 7C0A2800 4082FFF4
* 80AB0020 80A50060
* 2C070001 4182000C
* 807E0074 48000064
* 809E0074 80C3004C
* 2C060000 418200BC
* 38C60140 800300AC
* 2C000010 40A20008
* 38C60280 3D6080B8
* 816B7C28 816B0154
* 816B0000 48000008
* 396B0244 814B002C
* 7C0A3000 4082FFF4
* 2C000010 40A20008
* 396B0008 7CA62B78
* 80AB0034 80A50060
* D8020020 D8420028
* D8620030 D8820038
* D8A20040 39400000
* 7D8903A6 4E800421
* 2C0A0001 40820020
* 3D604330 91620010
* C8028470 6D8C8000
* 91820014 C8220010
* FC210028 C8020020
* C8420028 C8620030
* C8820038 C8A20040
* 3D808091 618CE440
* 7D8903A6 4E800420
* 3800002F 2800002E
* 60000000 00000000

Custom AI Functions [Magus]
* 0458047C 00000078
* 06580480 00000078
* 80580580 80580590
* 805805A0 805805B0
* 805805BC 805805DC
* 805805FC 80580610
* 80580624 80580654
* 805806FC 80580708
* 80580714 80580720
* 8058072C 80580744
* 80580750 80580768
* 80580780 805807B4
* 805807CC 805807DC
* 805807F4 80580804
* 80580820 80580820
* 80580820 80580820
* 805808D4 805808D4
* 06580580 00000010
* 8185007C 818C0034
* 39400001 4E800020
* 06580590 00000010
* 8185007C A18C0006
* 39400001 4E800020
* 065805A0 00000010
* 81850014 818C0058
* 39400001 4E800020
* 065805B0 0000000C
* 81850014 C02C0040
* 4E800020 00000000
* 065805BC 00000020
* 81850028 C02C0040
* 81850088 818C0014
* 818C004C C00C0008
* EC210028 4E800020
* 065805DC 00000020
* 81850028 C02C0044
* 81850088 818C0014
* 818C004C C00C000C
* EC210028 4E800020
* 065805FC 00000014
* 81850088 818C0014
* 818C004C C02C0008
* 4E800020 00000000
* 06580610 00000014
* 81850088 818C0014
* 818C004C C02C000C
* 4E800020 00000000
* 06580624 00000030
* 81850088 818C0014
* 818C004C C00C0008
* C02C000C EC000032
* EC210072 EC20082A
* FC200834 C002A458
* EC200824 4E800020
* 06580654 000000A8
* 81850088 818C0014
* 818C004C C82C0008
* C002A460 FC010040
* 40A2000C C022A464
* 48000080 C02C0008
* C04C000C 81850018
* C06C0040 FC601850
* EC2100F2 FC600090
* FC010040 40A20008
* C022966C 40A0000C
* C062A4D0 48000014
* FC020040 40A0000C
* C062A4D0 EC63182A
* D062001C EC220824
* 7C0802A6 90020018
* 3D808040 618C012C
* 7D8903A6 4E800421
* C002001C EC21002A
* C0028B94 EC210032
* 80020018 7C0803A6
* 39400000 4E800020
* 065806FC 0000000C
* 81850028 C02C0040
* 4E800020 00000000
* 06580708 0000000C
* 81850028 C02C0044
* 4E800020 00000000
* 06580714 0000000C
* 81850018 C02C000C
* 4E800020 00000000
* 06580720 0000000C
* 81850018 C02C0010
* 4E800020 00000000
* 0658072C 00000018
* 8185001C 818C0028
* 818C0010 818C0060
* C02C0018 4E800020
* 06580744 0000000C
* 818500D0 C02C0074
* 4E800020 00000000
* 06580750 00000018
* 8185001C 818C0028
* 818C0010 818CFFFC
* 39400001 4E800020
* 06580768 00000018
* 8185001C 818C0028
* 818C0010 898C0008
* 39400001 4E800020
* 06580780 00000034
* 81850014 818C0058
* 2C0C00A9 41820010
* 81850050 818C0010
* 48000014 81850070
* 818C0024 818C000C
* 818C0008 39400001
* 4E800020 00000000
* 065807B4 00000018
* 81850070 818C0020
* 818C000C 818C00E0
* 39400001 4E800020
* 065807CC 00000010
* 81850068 898C008F
* 39400001 4E800020
* 065807DC 00000018
* 81850070 818C0020
* 818C000C 818C00B0
* 39400001 4E800020
* 065807F4 00000010
* 8185007C 898C007F
* 39400001 4E800020
* 06580804 0000001C
* 81850070 818C0024
* 818C001C 818C0000
* 558CF7FE 39400001
* 4E800020 00000000
* 06580820 000000B4
* 81850018 C00C000C
* 816300BC C02B0018
* C04B001C C06B0020
* C08B0024 FC011840
* 40A10014 C02B0020
* C04B0024 C06B0018
* C08B001C 57E807FE
* 57E9063E 880300C0
* 28000002 800C0040
* 40820020 ECA30028
* EC010028 FC000210
* FCA02A10 FC002840
* 4081002C 48000020
* 2C080000 41820010
* 2C000000 40800010
* 48000014 2C000000
* 4080000C FC201890
* FC402090 2C090049
* 40800018 C00C000C
* C06C0040 EC210028
* EC2100F2 4800000C
* C00C0010 EC220028
* 4E800020 00000000
* 065808D4 00000060
* 8065001C 81830028
* 818C0010 818C0060
* 388C0014 C0229654
* 7C0802A6 90020018
* 3D808073 618C4F8C
* 7D8903A6 4E800421
* C002A464 FC010040
* 41820010 FC205050
* 39800001 48000008
* 39800000 80020018
* 7C0803A6 57E9063E
* 3949FFB5 4E800020

Custom AI Requirement Loader[Bero]
* C291E554 0000000C
* 2800001F 40810054
* 3C608058 60632E6C
* 80630000 7C040378
* 3884FFE0 7C041840
* 40800030 3C608058
* 60632E70 5484103A
* 7C632214 80630000
* 7C6903A6 4E800421
* 3C608091 6063ED20
* 7C6903A6 4E800420
* 38000020 2800001F
* 60000000 00000000

Custom AI Requirement Table[Bero]
* 04582E6C 00000002
* 06582E70 00000008
* 80583000 80583050

req Equal : 0x1020 lhs rhs[Bero]
* 06583000 00000050
* 7F8802A6 8098000C
* 7EE3BB78 38A00000
* 3FA08091 63BDDFC4
* 7FA903A6 4E800421
* FFE00890 80980008
* 7EE3BB78 38A00000
* 7FA903A6 4E800421
* 7F8803A6 3B800000
* FC01F840 4C820020
* 3B800001 4E800020

req IsStage : 0x1021 ID[Bero]
* 06583050 00000050
* 7F8802A6 80980008
* 7EE3BB78 38A00000
* 3FA08091 63BDDFC4
* 7FA903A6 4E800421
* FC00081E D8020020
* 80620024 3C808062
* 60843090 80840000
* 7C041800 7F8803A6
* 3B800001 4D820020
* 3B800000 4E800020

Custom AI Command Loader[Bero]
* C2917454 0000000B
* 28040032 4081004C
* 3884FFCD 3C608058
* 60636FFC 80630000
* 7C041800 4080002C
* 3C608058 60637000
* 5484103A 7C63202E
* 7C6903A6 4E800421
* 3C608091 606381C4
* 7C6903A6 4E800420
* 38800033 28040032
* 60000000 00000000

Custom AI Command Table[Bero]
* 04586FFC 00000001
* 06587000 00000008
* 80587200 00000000

cmd RetrieveATKD : 0x33 variable subaction opponent[Bero]
* 06587200 00000108
* 7F2802A6 809E0008
* 7F43D378 38A00000
* 3CC08091 60C6DFC4
* 7CC903A6 4E800421
* FC00081E D8010048
* 8081004C 807A0070
* 80BE000C 2C050001
* 40820024 88A30110
* 3C608128 6063BC30
* 3CC00005 60C62000
* 7CC629D6 7C633214
* 80630000 80630094
* 80A30004 7CA903A6
* 38630010 88C30001
* 7C043000 41820010
* 38630018 4200FFF0
* 48000064 809E0004
* 5484103A 7C84D214
* 38630004 38A00002
* 7CA903A6 A0A30000
* 92E10048 6CA58000
* 90A1004C C8010048
* EC00E028 D0040000
* 38630002 38840004
* 4200FFDC 38A00004
* 7CA903A6 C0230000
* D0240000 38630004
* 38840004 4200FFF0
* 48000018 3C60BF80
* 60630000 809E0004
* 5484103A 7C7A212E
* 7F2803A6 3B200002
* 4E800020 00000000

CPU falls from respawn plane when Turbo[Bero]
* 04909B10 4BC7C9F0
* 06586500 00000038
* 2C030001 40810008
* 48000028 80980044
* 80840074 808400B4
* 2C0400BE 4182000C
* 2C030001 4800000C
* 38600007 483837A8
* 483835E4 00000000

Ledge hanging/Lying routine injection(ledge:0x2060, lying:0x2070)[Bero]
* C29091E4 00000019
* 7C7C1B78 889C01BA
* 2C040006 4182001C
* 2C040007 41820014
* 2C040004 408200A4
* 38802070 48000008
* 38802060 80780044
* 38A0FFFF 90A10064
* 38A10064 38C00000
* 38E00000 3D008091
* 61088554 7D0903A6
* 4E800421 80780044
* 80630064 2C030000
* 41820034 7F03C378
* 38800000 38A00000
* 3CC08090 60C68BD4
* 7CC903A6 4E800421
* 98780110 3C608090
* 60639D18 7C6903A6
* 4E800420 80780044
* 38800000 38A0FFFF
* 90A10064 38A10064
* 38C00000 38E00000
* 3D008091 61088554
* 7D0903A6 4E800421
* 60000000 00000000

CE AI Input Fix [ds22]
* 04914AB4 60000000
* 04B27ACC 80914AB0
* 04B27AD0 809144F0
* 04B27AE0 809139FC
* 04B27AE8 80914FD0